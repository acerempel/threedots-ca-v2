@use "mixins" as *;
@use "font" as *;
@use "settings";
@use "sass:list";
@use "sass:meta";
@use "sass:string";

.p-space-1 { --paragraph-spacing-factor: 1; }
.p-space-3\/4 { --paragraph-spacing-factor: 0.75; }
.p-space-1\/2 { --paragraph-spacing-factor: 0.5; }
.p-space-1\/4 { --paragraph-spacing-factor: 0.25; }
.p-space-1\/8 { --paragraph-spacing-factor: 0.125; }

$abbrev-properties: (
  mt: margin-top,
  mb: margin-bottom,
  mr: margin-right,
  ml: margin-left,
  pl: padding-left,
  pr: padding-right,
  pt: padding-top,
  pb: padding-bottom,
  col-gap: grid-column-gap,
  row-gap: grid-row-gap,
  bp: --border-padding,
);

@include ratios ((space-y: (top bottom), space-x: (left right))) using ($sides, $ratio) {
  $side-one: list.nth($sides, 1);
  $side-two: list.nth($sides, 2);
  & > * {
    @include line-height-multiple(margin-#{$side-one}, $ratio);
    @include line-height-multiple(margin-#{$side-two}, $ratio);
    &:first-child { margin-#{$side-one}: 0 }
    &:last-child { margin-#{$side-two}: 0 }
  }
}

@include responsive-ratios ($abbrev-properties) using ($property, $ratio) {
  @include line-height-multiple($property, $ratio, !important);
}

$responsive-utilities: (
  flex: (display flex),
  column: (flex-direction column),
  row: (flex-direction row),
  row-reverse: (flex-direction row-reverse),
  align-center: (align-items center),
  grid: (display grid),
  max-width-content: (max-width settings.$max-width-content),
  max-width-bigger: (max-width 42rem),
  text-center: (text-align center),
  hidden: (display none),
  shown: (display initial),
  relative: (position relative),
  fixed: (position fixed),
  static: (position static),
  absolute: (position absolute),
  inline: (display inline),
  block: (display block),
  p-0: (padding 0),
  bg-normal: (background-color var(--background-colour-normal)),
  bg-lighter: (background-color var(--background-colour-lighter)),
  bg-transparent: (background-color transparent),
  light: (font-weight 300),
  regular: (font-weight 400),
  medium: (font-weight 500),
  semibold: (font-weight 600),
  bold: (font-weight 700),
  italic: (font-style italic),
  grid-auto-fit: (grid-template-columns string.unquote("repeat(auto-fit, minmax(var(--column-width, 18rem), 1fr))")),
  col-w-lg: (--column-width 18rem),
  col-w-md: (--column-width 15rem),
  col-w-sm: (--column-width 12rem),
  col-w-xs: (--column-width 9rem),
);

@include responsive ($responsive-utilities) using ($utility) {
  @if meta.type-of(list.nth($utility, 1)) == list {
    @each $property-name, $property-value in $utility {
      #{$property-name}: $property-value !important;
    }
  } @else {
    #{list.nth($utility, 1)}: list.nth($utility, 2) !important;
  }
}

.colour-highlight { color: var(--text-colour-highlight) }
.colour-normal { color: var(--text-colour-normal) }
.colour-lighter { color: var(--text-colour-lighter) }

@each $n, $_ratios in $font-ratios {
  .font-size-#{$n} {
    @include font-size($n, !important);
  }
}

.serif { @include serif(!important); }
.sans-serif { @include sans-serif(!important); }

.space-between { justify-content: space-between; }
.wrap { flex-wrap: wrap; }
.grow { flex-grow: 1; }

.flexible-items > * {
  flex: 1 0 auto;
}

.vertical-middle { vertical-align: middle; }

b { font-weight: 500; }
strong { font-weight: 600; }
.oblique, cite { font-style: oblique; }

$sc-letter-spacing: 0.05em;

.small-caps {
  font-variant-caps: small-caps;
  letter-spacing: $sc-letter-spacing;
}

.all-small-caps {
  font-variant-caps: all-small-caps;
  letter-spacing: $sc-letter-spacing;
}

.link-plain { --link-text-decoration-line: none; }
.link-uline { --link-text-decoration-line: underline; }

.link-uline-thicker {
  --link-initial-text-decoration-thickness: 0.1em;
  --link-hover-text-decoration-thickness: 0.2em;
}

.link-uline-normal {
  --link-initial-text-decoration-thickness: 0.05em;
  --link-hover-text-decoration-thickness: 0.1em;
}

.list-none {
  list-style: none;
  & > li {
    margin-inline-start: 0;
  }
}

.invisible {
  visibility: hidden;
  opacity: 0;
  transition: visibility 0s linear 300ms, opacity 200ms ease 100ms;
}

.visible {
  visibility: visible;
  opacity: 1;
  transition: visibility 0s linear 0s, opacity 300ms ease;
}

@each $width in 1px, 2px, 4px {
  .bw-#{$width} { --border-width: #{$width}; }
}

@each $side in "", "-top", "-left", "-right", "-bottom" {
  .border#{$side} {
    padding#{$side}: calc(var(--border-padding, #{lh(1)}) - var(--border-width, 1px));
    border#{$side}: var(--border-width, 1px) solid var(--border-colour, var(--text-colour-lighter));
  }
}

.border-rosey-grey { --border-colour: var(--rosey-grey); }
.border-text-lighter { --border-colour: var(--text-colour-lighter); }
.border-bg-lighter { --border-colour: var(--background-colour-lighter); }

.rounded-sm { border-radius: 2px; }
.rounded-md { border-radius: 4px; }
.rounded-lg { border-radius: 8px; }

.lowercase {
  text-transform: lowercase
}

.mx-auto {
  margin-left: auto !important;
  margin-right: auto !important;
}

.grid-col-first { grid-column: 1; }
.grid-col-last { grid-column: -1; }
.grid-col-all { grid-column: 1 / -1; }

$justifications: start, end, center, stretch;

@each $justify in $justifications {
  .justify-self-#{$justify} { justify-self: $justify; }
}

$alignments: left, right, center;

@each $align in $alignments {
  .text-#{$align} { text-align: $align; }
}

.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}
