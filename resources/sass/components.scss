@use "mixins" as *;
@use "font" as *;
@use "settings";
@use "sass:list";

$has-toggle: ();

@mixin toggle ($class, $properties) {
  .#{$class} {
    @each $name, $value in $properties {
      #{$name}: var(--#{$class}, $value);
    }
  }
  @if list.index($has-toggle, $class) == null {
    @include responsive (($class + -on, unset) ($class + -off, null)) using ($value) {
      --#{$class}: #{$value};
    }
    $has-toggle: list.append($has-toggle, $class) !global;
  }
}

@include toggle (dropdown-inner, (
  box-sizing: content-box,
  border-radius: 0.25em,
  box-shadow: 0px 2px 8px 1px rgba(16 16 16 / 0.5),
  z-index: 1,
  width: max-content,
  bottom: calc(100% + 0.75rem),
));


@include min-width(md) {
  @include toggle (dropdown-inner, (
    bottom: initial,
    top: calc(100% + 0.5rem),
  ))
}

.dropdown {
  position: relative;

  summary {
    display: block;
    &::-webkit-details-marker {
      display: none;
    }
  }

  .caret {
    transition: transform 0.2s ease;
    vertical-align: -0.125em;
    margin-left: -4px;
  }

  &[open] .caret {
    transform: rotate(-90deg);
    @include min-width(md) { transform: rotate(90deg); }
  }
}

.prose {
  h1, h2, h3, h4 {
    @include sans-serif;
  }
  h2, h3, h4 {
    @include mb(var(--paragraph-spacing-factor, 0));
  }
  h1 {
    @include font-size-4\.5;
    font-weight: 400;
    @include mb(0.75);
  }
  h2 {
    @include font-size-4;
    font-weight: 500;
    @include mt(0.75);
  }
  h3 {
    @include font-size-2;
    font-weight: 600;
    @include mt(0.5);
  }
  p, blockquote, figcaption, aside, details, li {
    @include serif;
  }
}

.big {
  h1 { @include font-size-5 }
  h2 { @include font-size-4 }
  h3 { @include font-size-3 }
}

.swing {
  @include mb(0.5);
  @include mt(1);
  @include min-width(bg) {
    height: 0;
    overflow: visible;
    transform-origin: top right;
    transform: translate(-100%, 0) rotate(-90deg) translate(calc(-0.25 * var(--base-line-height)), calc(-2 * var(--base-line-height)));
    text-align: right;
    transform-box: border-box;
    margin: 0;
    width: min-content;
  }
}

.dl-grid {
  @include min-width(sm) {
    display: grid;
    grid-template-columns: var(--width-narrow, 6ch) 1fr;
    grid-column-gap: var(--column-gap, 2ch);
  }
}

$full-width: settings.$max-width-content;

.main-grid {
  display: grid;
  justify-content: center;
  grid-template-columns: minmax(auto, $full-width);
  grid-template-areas: "header" "footer" "main";
  grid-row-gap: calc(0.25 * var(--base-line-height));
  grid-column-gap: 2ch;

  @include min-width(lg) {
    grid-template-columns: 14ch $full-width 14ch;
    grid-template-areas: "header main footer";
  }

  & > header { grid-area: header; }
  & > footer { grid-area: footer; }
  & > main {
    grid-area: main;
    max-width: $full-width;
    justify-self: center;
  }
}

.top-nav > a {
  margin-right: 1ch;
  text-transform: lowercase;
  &:last-child { margin-right: 0; }
  @include min-width(lg) {
    @include mb(0.25);
  }
}
