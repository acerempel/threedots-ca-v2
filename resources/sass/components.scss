@use "mixins" as *;
@use "font" as *;
@use "settings";
@use "sass:list";

$has-toggle: ();

@mixin toggle ($class, $properties) {
  .#{$class} {
    @each $name, $value in $properties {
      #{$name}: var(--#{$class}, $value);
    }
  }
  @if list.index($has-toggle, $class) == null {
    @include responsive (($class + -on, unset) ($class + -off, null)) using ($value) {
      --#{$class}: #{$value};
    }
    $has-toggle: list.append($has-toggle, $class) !global;
  }
}

.unstyled {
  -webkit-appearance: none;
  appearance: none;
  border: none;
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
  background: transparent;
}

.prose {
  h1, h2, h3, h4 {
    @include sans-serif;
  }
  h1 {
    @include font-size-4\.5;
    font-weight: 300;
    @include mb(0.75);
  }
  h2 {
    @include font-size-3;
    font-weight: 400;
    @include mt(1);
    @include mb(0.75);
  }
  h3 {
    @include font-size-2;
    font-weight: 400;
    @include mt(0.75);
    @include mb(var(--paragraph-spacing-factor, 0));
  }
  p, blockquote, figcaption, aside, details, li {
    @include serif;
  }
}

.swing {
  @include mb(0.5);
  @include mt(1);
  @include min-width(bg) {
    height: 0;
    overflow: visible;
    transform-origin: top right;
    transform: translate(-100%, 0) rotate(-90deg) translate(calc(-0.25 * var(--base-line-height)), calc(-2 * var(--base-line-height)));
    text-align: right;
    transform-box: border-box;
    margin: 0;
    width: min-content;
  }
}

.dl-grid {
  @include min-width(sm) {
    display: grid;
    grid-template-columns: var(--width-narrow, #{lh(3)}) 1fr;
    grid-column-gap: var(--column-gap, #{lh(1)});
  }
}

.quotation {
  blockquote {
    @include mb(0.25)
  }
  figcaption {
    position: relative;
    --base-font-size: 1rem;
    padding-left: 2ch;
    &::before {
      content: 'â€”';
      position: absolute;
      left: 0;
    }
  }
}

.toc a[aria-current = "true"] {
  font-weight: 600;
}
